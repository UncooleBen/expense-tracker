package com.xinying.hu.expense_tracker;

import org.springframework.ui.Model;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    private final UserService userService;

    @Autowired
    private ExpenseRepository expenseRepository;

    public MainController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping(path="/signup")
    public String signUp() {
        return "signup";
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public String addNewUser (@RequestParam String username, @RequestParam String email, Model model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
//        model.addAttribute("username", username);
//        model.addAttribute("email", email);
        User n = new User();
        n.setName(username);
        n.setEmail(email);
        userRepository.save(n);
        return "redirect:/user/index";
    }

    @GetMapping(path="index")
    public String index(Model model) {
        model.addAttribute("users", userRepository.findAll());
        return "index";
    }

    @GetMapping(path="/{id}/expenses")
    public String showExpenses (@PathVariable Integer id, Model model) {
//        List<Expense> expenses = expenseRepository.findAllByUserId(id);
        User user = userService.findUserById(id);
        model.addAttribute( "expenses", expenseRepository.findAllByPayerId(id));
        model.addAttribute("user", user);
        return "expenses";
    }

    @PostMapping(path="/{id}/expense/add")
    public String addExpense(@PathVariable Integer id, Integer borrowerId, float amount, float splitPercent, String category) {
        User payer = userService.findUserById(id);
        User borrower = userService.findUserById(borrowerId);
        Expense expense = new Expense(payer, borrower, amount, splitPercent, category);
        expenseRepository.save(expense);
        return "redirect:/user/{id}/expenses";
    }
}
